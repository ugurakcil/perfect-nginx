##########################################################################################
#
#  @author      : Uğur AKÇIL
#  @github      : https://github.com/ugurakcil/perfect-nginx (Follow the updates)
#  @created     : 22.02.2021
#
##########################################################################################

user                    www-data;
worker_processes        auto;
worker_rlimit_nofile    100000;

pid /run/nginx.pid;
include /etc/nginx/modules-enabled/*.conf;

events {
    worker_connections      4000;

    # This directive allows a worker to accept many connections in the queue at a time
    multi_accept            on;

    # We decided to set the value to epoll because we are working on a Ubuntu platform
    # The epoll method is the most effective processing method for Linux platforms
    use                     epoll;

    # The value of this directive specifies the number of events Nginx will transfer to the kernel.
    epoll_events            512;
}

http {
    # cache informations about FDs, frequently accessed files
    # can boost performance, but you need to test those values
    open_file_cache max=200000 inactive=20s;
    open_file_cache_valid 30s;
    open_file_cache_min_uses 2;
    open_file_cache_errors on;

    # if client stop responding, free up memory -- default 60
    send_timeout 2;

    # if the request body size is more than the buffer size, then the entire (or partial)
    # request body is written into a temporary file
    client_body_buffer_size  64k;

    # buffer size for reading client request header -- for testing environment
    client_header_buffer_size 128k;
    client_max_body_size 128k;

    # maximum number and size of buffers for large headers to read from client request
    large_client_header_buffers 4 64k;

    # copies data between one FD and other from within the kernel
    # faster than read() + write()
    sendfile on;

    # send headers in one piece, it is better than sending them one by one
    tcp_nopush on;

    # don't buffer data sent, good for small data bursts in real time
    tcp_nodelay on;
    
    # server will close connection after this time -- default 75
    keepalive_timeout 30;

    types_hash_max_size 2048;
    server_tokens off;

    # allow the server to close connection on non responding client, this will free up memory
    reset_timedout_connection on;

    server_names_hash_bucket_size 64;
    # server_name_in_redirect off;

    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    
    proxy_http_version      1.1;
    proxy_set_header        Connection "";
    proxy_set_header        Upgrade $http_upgrade;
    proxy_set_header        Connection 'upgrade';
    proxy_set_header        Host $host;
    proxy_set_header        X-Real-IP $remote_addr;
    proxy_set_header        X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header        X-Forwarded-Proto $scheme;
    proxy_cache_bypass      $http_upgrade;

    ##
    # SSL Settings
    ##

    ssl_protocols TLSv1 TLSv1.1 TLSv1.2 TLSv1.3; # Dropping SSLv3, ref: POODLE
    ssl_prefer_server_ciphers on;

    ##
    # Logging Settings
    ##

    # /var/log/nginx/access.log
    access_log off;
    error_log /var/log/nginx/error.log crit;

    ##
    # Gzip Settings
    ##

    # reduce the data that needs to be sent over network
    gzip on;

    # gzip_static on;
    gzip_min_length 10240;
    gzip_comp_level 1;
    gzip_vary on;
    gzip_disable msie6;
    gzip_proxied expired no-cache no-store private auth;
    gzip_types
          # text/html is always compressed by HttpGzipModule
          text/css
          text/javascript
          text/xml
          text/plain
          text/x-component
          application/javascript
          application/x-javascript
          application/json
          application/xml
          application/rss+xml
          application/atom+xml
          font/truetype
          font/opentype
          application/vnd.ms-fontobject
          image/svg+xml;

    ##
    # Virtual Host Configs
    ##

    include /etc/nginx/conf.d/*.conf;
    include /etc/nginx/sites-enabled/*;
}